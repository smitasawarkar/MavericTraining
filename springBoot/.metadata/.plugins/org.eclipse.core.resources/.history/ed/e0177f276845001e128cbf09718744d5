package com.maveric.datavisualization.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.maveric.datavisualization.entities.Transaction;
import com.maveric.datavisualization.exception.CustomeException;
import com.maveric.datavisualization.services.TransactionService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/user")
@Slf4j
public class TransactionController {
	// private static final Logger logger = LoggerFactory.getLogger(TransactionController.class);
	    @Autowired
	    private TransactionService transactionService;
	   
	  
	    
	    /**
	     * 
	     * @param id
	     * @param request
	     * @return
	     */
	    @GetMapping("/getTxnById/{id}")
	    public ResponseEntity<Transaction> getTransactions(@PathVariable Long id,HttpServletRequest request) {
	    	log.info("TransactionController-getTransactions() call started");
	    	//log.info("transactionService.getTransactions(id) :: {}",transactionService.getTransactions(id));
	    	
	    	 log.info("TransactionController-getTransactions() method ended ");
	    	return new ResponseEntity<>(transactionService.getTransactions(id), HttpStatusCode.valueOf(HttpStatus.OK.value()));
	   
	    }
	    

	    /**
	     * 
	     * @param insertTxn
	     * @param request	
	     * @return
	     */
	   @PostMapping(value = "/insertTxn", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	    public ResponseEntity<String> insertTxn(@RequestBody @Valid Transaction insertTxn, HttpServletRequest request) {
	       
	    	log.info("TransactionController-insertTxn() call started");
	        log.info("transaction Details : {}, Uri : {},",insertTxn, request.getRequestURI());
	        
	        transactionService.insertTxn(insertTxn);
	        
	        log.info(" transactionService.insertTxn(insertTxn): {}", transactionService.insertTxn(insertTxn));
	        
	        log.info("TransactionController-insertTxn() method ended ");
	       return new ResponseEntity<>("Transaction Inserted successfully!", HttpStatus.OK);
	     
	       // return new ResponseEntity<>(transactionService.insertTxn(insertTxn), HttpStatusCode.valueOf(HttpStatus.OK.value()));
	       
	    }

	   /**
	    * 
	    * @param id
	    * @param transaction
	    * @return
	    * @throws CustomeException
	    */
	   
	   
//	   @PutMapping("/updateTxn/{id}")
//	    public ResponseEntity<String> updateTxn(@PathVariable("id")long id, @RequestBody Transaction transaction) throws JsonProcessingException{
//	    	log.info("TransactionController-updateTxn() method call started");
//	    	//Transaction transaction2=transactionService.updateTxn(id, transaction);
//	    	
//	    	transactionService.updateTxn(id, transaction);
//	    	log.info("transactionService.updateTxn method {}",transactionService.updateTxn(id, transaction));
//
//	    	log.info("TransactionController-updateTxn() method ended ");
//	    	return new ResponseEntity<>("Transaction Updated successfully!", HttpStatus.OK);
//	    
//	    }
//	    @PutMapping("/updateTxn/{id}")
//	    public ResponseEntity<Transaction> updateTxn(@PathVariable("id")long id, @RequestBody Transaction transaction) throws JsonProcessingException{
//	    	log.info("TransactionController-updateTxn() method call started");
//	    	//Transaction transaction2=transactionService.updateTxn(id, transaction);
//	    	Transaction	UpdateTxnResponse=null;
//	    	Transaction updateTxndata = transactionService.updateTxn(id, transaction);
//	    	log.info("transactionService.updateTxn updateTxndata method {}",updateTxndata);
//	    	
//	    	if(!(updateTxndata==null))
//	    	{
//	    		return new ResponseEntity<>(updateTxndata, HttpStatus.OK);
//	    		
//	    	}
//	    	else
//	    	{
//	    		UpdateTxnResponse= ResponseEntity.badRequest().body("Error occured While updating transaction");
//	    	}
//	    	log.info("TransactionController-updateTxn() method ended ");
//	    	
//	    return UpdateTxnResponse;
//	    }
	   
	   @PutMapping("/updateTxn/{id}")
	   public ResponseEntity<Transaction> updateTxn(@PathVariable("id") long id, @RequestBody Transaction transaction) throws JsonProcessingException {
	       log.info("TransactionController-updateTxn() method call started");
	       
	       // Call the service method to update the transaction
	       Transaction updateTxndata = transactionService.updateTxn(id, transaction);
	       
	       log.info("transactionService.updateTxn updateTxndata method {}", updateTxndata);
	       
	       if (updateTxndata != null) {
	           // If the update was successful, return a ResponseEntity with the updated transaction and HTTP status OK
	           return new ResponseEntity<>(updateTxndata, HttpStatus.OK);
	       } else {
	           // If there was an issue with the update, return a ResponseEntity with a bad request status and an error message
	           return ResponseEntity.badRequest().body(null); // You can return null or a suitable error indication here
	       }
	       
	   }


	    
	    /**
	     * 
	     * @param id
	     * @return
	     */
	    @DeleteMapping("/deleteTxn/{id}")
	    public ResponseEntity<String> deleteTxn(@PathVariable("id") long id) 
	    {
	    	log.info("TransactionController-deleteTxn() call started");
	    	
	    	transactionService.deleteTxn(id);
	    	log.info("TransactionController-deleteTxn() call ended");
	    	return new ResponseEntity<>("Transaction deleted successfully!", HttpStatus.OK);
	    	
	    }
	    
	   
		

}
