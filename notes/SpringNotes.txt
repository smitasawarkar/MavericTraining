Spring :-




Test
This layer provides support of testing with JUnit and TestNG.

Spring Core Container
The Spring Core container contains core, beans, context and expression language (EL) modules.

Core and Beans
These modules provide IOC and Dependency Injection features.

Context
This module supports internationalization (I18N), EJB, JMS, Basic Remoting.

Expression Language
It is an extension to the EL defined in JSP. It provides support to setting and getting property values, method invocation, accessing collections and indexers, named variables, logical and arithmetic operators, retrieval of objects by name etc.

AOP, Aspects and Instrumentation
An aspect is a subprogram that is associated with a specific property of a program.
These modules support aspect oriented programming implementation where you can use Advices, Pointcuts etc. to decouple the code.
The aspects module provides support to integration with AspectJ.
The instrumentation module provides support to class instrumentation and classloader implementations.

Data Access / Integration
This group comprises of JDBC, ORM, OXM, JMS and Transaction modules. These modules basically provide support to interact with the database.

Web
This group comprises of Web, Web-Servlet, Web-Struts and Web-Portlet. These modules provide support to create web application.



Spring Boot
spring boot is a auto configuration ,auto dependancy resolution ,management endpoints, embeded HTTP Servers (tomcat / jetty)

auto dependancy resolution + auto configuration + management endpoints +  embeded HTTP Servers (tomcat / jetty) 

spring boot is same as spring boot CLI
spring boot = spring boot CLI

spring boot starter  is a just a jar  file it provide a "auto dependancy resolution"

spring boot layers
presentation(controller), business(service) ,persistance(model , entity) ,database(DAO)




=======================================================================================================================================
***************************************************************************************************************************************
=======================================================================================================================================



Spring Jpa

Spring Boot JPA is a Java specification for managing relational data in Java applications. It allows us to access and persist data between Java object/ class and relational database. JPA follows Object-Relation Mapping (ORM). It is a set of interfaces. It also provides a runtime EntityManager API for processing queries and transactions on the objects against the database. It uses a platform-independent object-oriented query language JPQL (Java Persistent Query Language).
In the context of persistence, it covers three areas:
The Java Persistence API
Object-Relational metadata
The API itself, defined in the persistence package
JPA is not a framework. It defines a concept that can be implemented by any framework.


Why we use JPA?

JPA is simpler, cleaner, and less labor-intensive than JDBC, SQL, and hand-written mapping. JPA is suitable for non-performance oriented complex applications. The main advantage of JPA over JDBC is that, in JPA, data is represented by objects and classes while in JDBC data is represented by tables and records. It uses POJO to represent persistent data that simplifies database programming. There are some other advantages of JPA:
JPA avoids writing DDL in a database-specific dialect of SQL. Instead of this, it allows mapping in XML or using Java annotations.
JPA allows us to avoid writing DML in the database-specific dialect of SQL.
JPA allows us to save and load Java objects and graphs without any DML language at all.
When we need to perform queries JPQL, it allows us to express the queries in terms of Java entities rather than the (native) SQL table and columns.


Spring JPA features

There are following features of JPA:
It is a powerful repository and custom object-mapping abstraction.
It supports for cross-store persistence.
It means an entity can be partially stored in MySQL and Neo4j (Graph Database Management System).
It dynamically generates queries from queries methods name.
The domain base classes provide basic properties.
It supports transparent auditing.
Possibility to integrate custom repository code.
It is easy to integrate with Spring Framework with the custom namespace.


JPA Architecture

JPA is a source to store business entities as relational entities. It shows how to define a POJO as an entity and 
how to manage entities with relation.

The following figure describes the class-level architecture of JPA 
that describes the core classes and interfaces of JPA that is defined in the javax persistence package. 

 The JPA architecture contains the following units:
Persistence: It is a class that contains static methods to obtain an EntityManagerFactory instance.
EntityManagerFactory: It is a factory class of EntityManager. It creates and manages multiple instances of EntityManager.
EntityManager: It is an interface. It controls the persistence operations on objects. It works for the Query instance.
Entity: The entities are the persistence objects stores as a record in the database.
Persistence Unit: It defines a set of all entity classes. In an application, EntityManager instances manage it. The set of entity classes represents the data contained within a single data store.
EntityTransaction: It has a one-to-one relationship with the EntityManager class. For each EntityManager, operations are maintained by EntityTransaction class.
Query: It is an interface that is implemented by each JPA vendor to obtain relation objects that meet the criteria.





JPA Class Relationship

The relationship between EntityManager and EntiyTransaction is one-to-one. 
There is an EntityTransaction instance for each EntityManager operation.

The relationship between EntityManageFactory and EntiyManager is one-to-many.
 It is a factory class to EntityManager instance.
 
The relationship between EntityManager and Query is one-to-many. 
We can execute any number of queries by using an instance of EntityManager class.

The relationship between EntityManager and Entity is one-to-many. 
An EntityManager instance can manage multiple Entities.


Rest Api's
==========



REST stands for REpresentational State Transfer. REST specifies a set of architectural constraints. Any service which satisfies these constraints is called RESTful Service.
The five important constraints for RESTful Web Service are
Client - Server : There should be a service producer and a service consumer.
The interface (URL) is uniform and exposing resources.
The service is stateless.
The service results should be Cacheable. HTTP cache, for example.
Service should assume a Layered architecture. Client should not assume direct connection to server - it might be getting info from a middle layer - cache.

Spring Boot RestTemplate shows how to use RestTemplate to create synchronous HTTP requests in a Spring application.
RestTemplate is a synchronous client to perform HTTP requests. It uses a simple, template method API over underlying HTTP client libraries such as the JDK HttpURLConnection, Apache HttpComponents, and others.

Since Spring 1.5.0, a new client WebClient is available that can be use do create both synchronous and asynchronous requests. In the future releases, RestTemplate will be deprecated in favour of WebClient.
Rest Template is used to create applications that consume RESTful Web Services. You can use the exchange() method to consume the web services for all HTTP methods. The code given below shows how to create Bean for Rest Template to auto wiring the Rest Template object.
